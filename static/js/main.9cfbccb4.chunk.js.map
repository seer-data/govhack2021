{"version":3,"sources":["components/GameWelcome.tsx","index.tsx"],"names":["required","value","undefined","mustBeNumber","isNaN","composeValidators","validators","reduce","error","validator","getStateFromPostcode","postcode","FieldInput","input","meta","label","placeholder","style","marginBottom","Input","touched","content","pointing","FieldSelect","options","Dropdown","onChange","_","data","console","log","selection","constants","regularShowerhead","efficientShowerhead","frontLoader","topLoader","handWashing","damData","volume","capacity","GameWelcome","useState","panel","setPanel","formData","setFormData","showerMinutes","age","timesHandsWashed","washingType","closestDam","damPercentFull","Math","round","positiveDamOutcome","getDamPercentRemainder","usageAcrossPopulation","remainder","margin","width","maxHeight","textAlign","onSubmit","values","render","handleSubmit","form","submitting","pristine","Message","color","marginTop","name","validate","component","type","Button","className","backgroundColor","basic","icon","disabled","key","text","height","position","border","borderTop","bottom","fontSize","left","top","transform","Icon","fill","paused","amplitude","speed","points","onClick","role","aria-label","src","minWidth","maxWidth","minHeight","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9cfbccb4.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport Wave from \"react-wavify\";\nimport { Button, Input, Message, Form as SemanticForm, Dropdown, Label, Icon } from \"semantic-ui-react\";\nimport { Form, Field } from \"react-final-form\";\nimport { divIcon } from \"leaflet\";\n\nconst required = (value) => (value ? undefined : \"Required\");\nconst mustBeNumber = (value) => (isNaN(value) ? \"Must be a number\" : undefined);\nconst minValue = (min) => (value) =>\n  isNaN(value) || value >= min ? undefined : `Should be greater than ${min}`;\nconst composeValidators = (...validators) => (value) =>\n  validators.reduce((error, validator) => error || validator(value), undefined);\n\nconst getStateFromPostcode = (postcode) => {\n    if (postcode >= 3000) {\n        return \"VIC\";\n    } else if (postcode >= 2000) {\n        return \"NSW\";\n    } else {\n        return \"NSW\";\n    }\n}\n\nconst FieldInput = ({ input, meta, label, placeholder }) => (\n  <div style={{ marginBottom: \"1rem\" }}>\n    <h4>{label}</h4>\n    <SemanticForm.Input\n      {...input}\n      placeholder={placeholder || \"\"}\n      error={(meta.error && meta.touched) ? { content: meta.error, pointing: \"above\" } : undefined}\n    />\n  </div>\n);\n\nconst FieldSelect = ({ input, meta, label, placeholder, options }) => (\n  <div style={{ marginBottom: \"1rem\" }}>\n    <h4>{label}</h4>\n    <Dropdown\n      {...input}\n      onChange={(_, data) => {\n        console.log(data);\n        input.onChange(data?.value);\n      }}\n      selection\n      options={options}\n      placeholder={placeholder || \"\"}\n      error={meta.error && meta.touched}\n    />\n  </div>\n);\n\n// https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release\nconst constants = {\n    population: {\n        \"NSW\": 8172500,\n        \"VIC\": 6661700,\n        \"SA\": 1770800,\n    },\n  sydneyPopulation: 5312163, // people\n  sydneyPopDensity: 430, // people per square km\n  usageData: {\n    regularShowerhead: 10, // L/min\n    efficientShowerhead: 6.5, // L/min\n    frontLoader: 65, // L per wash\n    topLoader: 110, // L per wash\n    handWashing: 2, // L for a 30 second hand washing\n  }\n};\n\nconst damData = { // All values in ML (megalitres)\n  \"Woronora Dam\": {\n    volume: 57854,\n    capacity: 71790, // capacity\n  },\n  \"Warragamba Dam\": {\n    volume: 1955246,\n    capacity: 2027000,\n  },\n  \"Closest Sydney Dams\": {\n    volume: 57854 + 1955246,\n    capacity: 71790 + 2027000,\n  }\n}\n\nconst getClosestDam = (postcode) => {\n  const closest = \"Woronora Dam\";\n  return damData[closest];\n}\n\nexport const GameWelcome = () => {\n\n    const [panel, setPanel] = useState(1);\n    const [formData, setFormData] = useState<any>({});\n    const { postcode, age, showerMinutes, timesHandsWashed, washingType } = formData || {};\n    const closestDam = getClosestDam(postcode || 2000);\n    const damPercentFull = Math.round(closestDam.volume / closestDam.capacity * 100);\n\n    const positiveDamOutcome = () => {\n        const remainderDamPercent = getDamPercentRemainder();\n\n        if (remainderDamPercent > 0.5) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const positiveIndividualUsage = () => {\n        const goodUsage = (\n            washingType === \"topLoader\" &&\n            timesHandsWashed < 10 &&\n            showerMinutes < 12\n        );\n\n        return goodUsage;\n    }\n\n    const getDamPercentRemainder = () => {\n        const currentUserUsage = (showerMinutes * constants.usageData.regularShowerhead) + \n            (timesHandsWashed * constants.usageData.handWashing) +\n            constants.usageData[washingType];\n        \n        const usageAcrossPopulation = currentUserUsage * constants.population[getStateFromPostcode(postcode)] * 30;\n\n        const remainder = (closestDam.volume * 1000000) - usageAcrossPopulation;\n\n        if (remainder > 0) {\n            const newDamPercentFull = Math.round(remainder / (closestDam.capacity * 1000000) * 100);\n            return newDamPercentFull;\n        } else {\n            return 0;\n        }\n    }\n\n    return (\n        <div>\n            <div style={{ margin: \"100px auto\", width: \"80vw\", maxHeight: \"70vw\", textAlign: \"center\" }}>\n\n              <div style={{ width: 600, margin: \"0 auto\" }}>\n                {/* AGE & POSTCODE */}\n                {panel === 1 &&\n                <Form\n                //   initialValues={{ postcode: 3000, age: 18 }}\n                  onSubmit={values => {\n                    setFormData({ ...formData, ...values });\n                    setPanel(2);\n                  }}\n                  render={({ handleSubmit, form, submitting, pristine, values }) => (\n                    <SemanticForm onSubmit={handleSubmit}>\n                      <h1>Are you a Water Warrior?</h1>\n                      <Message color=\"blue\">\n                        Learn about how to save water!\n                      </Message>\n\n                      <div style={{ marginTop: \"100px\" }}>\n                        <Field\n                          name=\"postcode\"\n                          label=\"What's your postcode?\"\n                          validate={composeValidators(required, mustBeNumber)}\n                          component={FieldInput}\n                          placeholder=\"Eg. 2113\"\n                          type=\"number\"\n                        />\n\n                        <Field\n                          name=\"age\"\n                          label=\"How old are you?\"\n                          validate={composeValidators(required, mustBeNumber)}\n                          component={FieldInput}\n                          placeholder=\"Eg. 16\"\n                          type=\"number\"\n                        />\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        className=\"ui button purple\"\n                        style={{ marginTop: \"40px\", backgroundColor: \"#8189e8\" }}\n                        content=\"Let's get started!\"\n                        label={{ basic: true, color: '#8189e8', pointing: 'left', content: \"Next\", icon: 'arrow right' }}\n                        disabled={!values && !values.postcode || !values.age}\n                      />\n                    </SemanticForm>\n                  )}\n                />\n                }\n              </div>\n\n              <div style={{ width: 600, margin: \"0 auto\" }}>\n                {/* MAIN QUESTIONS */}\n                {panel === 2 &&\n                <Form\n                //   initialValues={{ showerMinutes: 10, timesHandsWashed: 18, washingType: \"topLoader\" }}\n                  onSubmit={values => {\n                    console.log(values);\n                    setFormData({ ...formData, ...values });\n                    setPanel(3);\n                  }}\n                  render={({ handleSubmit, form, submitting, pristine, values }) => (\n                    <SemanticForm onSubmit={handleSubmit}>\n                      <h1>Are you a Water Warrior?</h1>\n\n                      <div style={{ marginTop: \"100px\" }}>\n                        <Field\n                          name=\"showerMinutes\"\n                          label=\"How many minutes do you usually shower for?\"\n                          validate={composeValidators(required, mustBeNumber)}\n                          component={FieldInput}\n                          placeholder=\"Eg. 20\"\n                          type=\"number\"\n                        />\n                        <Field\n                          name=\"timesHandsWashed\"\n                          label=\"How many times a day do you wash your hands?\"\n                          validate={composeValidators(required, mustBeNumber)}\n                          component={FieldInput}\n                          placeholder=\"Eg. 8\"\n                          type=\"number\"\n                        />\n                        <Field\n                          name=\"washingType\"\n                          label=\"Does your household use a front loader washing machine or top loader?\"\n                          validate={composeValidators(required)}\n                          component={FieldSelect}\n                          placeholder=\"Eg. Top\"\n                          options={[\n                            { key: \"Top-Loader\", text: \"Top-Loader\", value: \"topLoader\" },\n                            { key: \"Front-Loader\", text: \"Front-Loader\", value: \"frontLoader\" }\n                          ]}\n                        />\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        className=\"ui button purple\"\n                        style={{ marginTop: \"40px\", backgroundColor: \"#8189e8\" }}\n                        content=\"Let's find out...\"\n                        disabled={!values.showerMinutes || !values.timesHandsWashed || !values.washingType}\n                      />\n                    </SemanticForm>\n                  )}\n                />\n                }\n              </div>\n\n                {/* CURRENT DAM STATUS */}\n                {panel === 3 &&\n                    <>\n                        <h1>Here's what your closest dam looks like now...</h1>\n\n                        <div style={{\n                            width: \"300px\", height: \"300px\", position: \"relative\",\n                            border: \"1px black solid\", borderTop: \"none\", margin: \"0 auto\"\n                        }}>\n                            <div style={{bottom: 0, height: `${damPercentFull}%`, width: \"100%\", position: \"absolute\"}}>\n                              <div style={{ color: \"white\", fontSize: \"32px\", position: \"absolute\", left: \"50%\", top: \"60%\", transform: \"translate(-50%, -50%)\" }} color=\"blue\">\n                                <Icon name=\"tint\" />{damPercentFull}%\n                              </div>\n                                <Wave\n                                    style={{ height: \"100%\" }}\n                                    fill='#52bfff'\n                                    paused={false}\n                                    options={{\n                                        amplitude: 20,\n                                        speed: 0.1,\n                                        points: 3\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                        <Button\n                            className=\"ui button purple\"\n                            style={{ marginTop: \"40px\", backgroundColor: \"#8189e8\" }}\n                            content=\"Let's see what it will look like in a month...\"\n                            label={{ basic: true, color: '#8189e8', pointing: 'left', content: \"Next\", icon: 'arrow right' }}\n                            onClick={() => setPanel(4)}\n                        />\n                    </>\n                }\n\n                {/* AFTER USAGE DAM LEVELS */}\n                {panel === 4 &&\n                    <>\n                        <h1>If everyone in {getStateFromPostcode(postcode)} had the same usage for a month, here's what would be left...</h1>\n\n                        {!positiveDamOutcome() &&\n                            <p role=\"img\" aria-label=\"scared emoji\" style={{ fontSize: \"5rem\", margin: 0 }}>\n                                😨\n                            </p>\n                        }\n\n                        <div style={{\n                            width: \"300px\", height: \"300px\", position: \"relative\",\n                            border: \"1px black solid\", borderTop: \"none\", margin: \"0 auto\"\n                        }}>\n                            <div style={{ color: getDamPercentRemainder() > 60 ? \"white\" : \"black\", fontSize: \"32px\", position: \"absolute\", left: \"50%\", top: \"60%\", transform: \"translate(-50%, -50%)\" }}>\n                                <Icon name=\"tint\" />{getDamPercentRemainder()}%\n                            </div>\n                            <div style={{bottom: 0, height: `${getDamPercentRemainder()}%`, width: \"100%\", position: \"absolute\"}}>\n                              {getDamPercentRemainder() > 0 &&\n                                <Wave\n                                    style={{ height: \"100%\" }}\n                                    fill='#52bfff'\n                                    paused={false}\n                                    options={{\n                                        amplitude: 20,\n                                        speed: 0.1,\n                                        points: 3\n                                    }}\n                                />\n                                }\n                            </div>\n                        </div>\n\n                        <Button\n                            className=\"ui button purple\"\n                            style={{ marginTop: \"40px\", backgroundColor: \"#8189e8\" }}\n                            content=\"Help!\"\n                            label={{ basic: true, color: '#8189e8', pointing: 'left', content: \"What can we do???\", icon: 'arrow right' }}\n                            onClick={() => setPanel(5)}\n                        />\n                    </>\n                }\n\n                {/* OUTCOME PANEL */}\n                {panel === 5 &&\n                    <>\n                        {(positiveDamOutcome() && positiveIndividualUsage()) ?\n                            <>\n                                <h1>Congratulations! You are a Water Warrior!</h1>\n\n                                <img src=\"./Thank-you-transparent.svg\" height=\"400px\" />\n\n                                <div>\n                                    <h3>for playing your part to help the {getStateFromPostcode(postcode)} community!</h3>\n                                </div>\n                            </>\n                            :\n                            <>\n                                <h1>Australia's water resources are precious and limited.</h1>\n\n                                <h1>Here's what we can do to help ... </h1>\n\n                                <div style={{ minWidth: \"300px\", maxWidth: \"600px\", margin: \"0 auto\", fontSize: \"20px\" }}>\n                                    <ul style={{}}>\n                                        <li>Take shorter showers (Showers alone make up 26% of our water usage!)</li>\n                                        <li>Don't use sprinklers (Sprinklers use 999 L of water an hour - and no, that's not a typo!)</li>\n                                        <li>Always use the half-flush on a toilet where possible (20% of household water usage goes down the toilet ... literally)</li>\n                                        <li>The next time you're buying a washing machine, get a front loader (front loaders use 65 L of water per load, while top loaders use 110 L of water per load!)</li>\n\n                                    </ul>\n                                </div>\n\n                                <div style={{ marginTop: \"40px\" }}>\n                                    <h2>Thank you for playing your part to help the {getStateFromPostcode(postcode)} community!</h2>\n                                </div>\n                            </>\n                        }\n\n                        <Button\n                            className=\"ui button purple\"\n                            style={{ marginTop: \"40px\", backgroundColor: \"#8189e8\" }}\n                            content=\"Share this on Facebook\"\n                            label={{ basic: true, color: '#8189e8', pointing: 'left', content: \"Let's raise awareness\", icon: 'arrow right' }}\n                            onClick={() => setPanel(2)}\n                        />\n                        <p>\n                            <Button\n                                style={{ marginTop: \"40px\" }}\n                                color='teal'\n                                content=\"Monitor dam levels\"\n                                label={{ basic: true, color: 'teal', pointing: 'left', content: \"Notify me when it drops\", icon: 'arrow right' }}\n                                onClick={() => setPanel(2)}\n                            />\n                        </p>\n                    </>\n                }\n            </div>\n\n            <div style={{ minHeight: \"30vh\", marginTop: \"200px\" }}>\n                <Wave\n                    style={{ height: \"50vh\" }}\n                    fill='#52bfff'\n                    paused={false}\n                    options={{\n                        height: 20,\n                        amplitude: 20,\n                        speed: 0.3,\n                        points: 8\n                    }}\n                />\n            </div>\n\n        </div>\n    )\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n// import { MapTest } from \"./components/MapTest\";\nimport { GameWelcome } from 'components/GameWelcome';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameWelcome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}